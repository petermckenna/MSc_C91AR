---
title: "IG_Quarto_lab_week_8"
author: "Isabel Gillert"
format: html
editor: visual
---

# Setting up

## Load the libraries

```{r warning=FALSE, message=FALSE}
library(tidyverse)
library(corrr)
library(psych)
library(GGally)
```

## Set the seed

```{r}
#set seed for random number generator
set.seed(385)
```

## Read in the data

The data consists out of two variables. The first one, `trust_score` is a numeric with values from 1 to 100 measuring trust. The second variable is `resp_time` which measures the time needed to give a response. The participants were told they compete against a computer in this task.

```{r}
trust_rt <- read_csv("data_raw/trust_and_rt.csv",
                     col_types = "dd")
```

# Examining the data

```{r}
describe(trust_rt)
```

In total, 563 participants took part in the study. Their mean score on the trust scale was 50.08 (SD = 1.02). Their average response time was 1262ms (SD = 1.01). The data seems to be neither positively or negatively skewed.

# Plot the data

This scatter plot shows the relationship between the trust measure and participants response time. On the x-axis is the trust score, and on the y-axis is the response time in milliseconds. Darker dots indicate more data points at that specific location.

```{r}
ggplot(trust_rt,
       mapping = aes(x = trust_score, y = resp_time)) +
  geom_point(alpha = .4) + # changes the transparency of the dots
  labs(x = "\nTrust Score",
       y = "Response time (ms)\n",
       title = "Trust and response time (ms) relationship")
```

# Data simulation & correlation analysis

Because the data is not positively or negatively skewed, we don't need to transform it into the log space.

## Calculate the correlation

We first calculate the correlation between the two variables (r=0.80).

```{r}
#Calculate the correleation
cor(trust_rt$trust_score, trust_rt$resp_time)
```

Then, based on the variables r score and standard deviations, we define the covariance matrix which we call `my_sigma` and print it.

```{r}
#trust 50.08 (SD = 1.02)
#response 1262ms (SD = 1.01)
#correlation times trust_sd times resp_sd
my_cov <- .80*1.02*1.01
my_sigma <-matrix(c(1.02^2, my_cov, my_cov, 1.01^2), ncol = 2)
my_sigma #prints
```

## Simulate the data

Using the original data sets means, and sigma, we simulate a small data set of six people.

```{r}
#turst_score 50.08 (SD = 1.02). 
#reso_time 1262ms (SD = 1.01).
trust_resp <-
  MASS::mvrnorm(n = 6,                         #new 6 synthetic humans
                mu = c(trust_score = 50.08,    #mean of trust
                       resp_time = 1262),      #mean of resp
                Sigma = my_sigma)              #our positive definitive matrix
#view the output
trust_resp
```

After checking if this looks alright and does not deviate too much from our set means, we simulate a data set `new_humansc` consisting of 1000 people which we will label as 'simulated'.

```{r}
new_humans <-
  MASS::mvrnorm(n = 1000,                      #new 6 synthetic humans
                mu = c(trust_score = 50.08,    #mean of trust
                       resp_time = 1262),      #mean of resp
                Sigma = my_sigma) |>            #our positive definitive matrix
  as_tibble() |>                           #make a tibble for plotting
  mutate(type = "simulated")               #vector labeling new humans as simulated  

#Check if it only contains simulated humans
unique(new_humans$type)
```

Then, we combine our original data set with our simulated data and check that we only have either real or simulated people in our data.

```{r}
all_data <-
  bind_rows(trust_rt |>
              mutate(type = "real"), # vector labeling data as real 
            new_humans)
#Check data type
unique(all_data$type)
```

## Plot real and simulated data against each other

Lastly, we plot the data of the real humans against the simulated ones.

```{r}
  simulated_real <- ggplot(all_data,
       aes(x = trust_score,
           y = resp_time)) +
  geom_point(aes(colour = type),
             alpha = .5) +
    labs(x = "\nTrust Score",
       y = "Response time (ms)\n",
       colour = "Data type",
       title = "Trust and response time (ms) relationship \n for real and simulated data")
```
