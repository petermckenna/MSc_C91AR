# presentation setup
knitr::opts_chunk$set(echo = T,
eval = T,
results = 'hide',
message = FALSE,
warning = FALSE,
tidy.opts = list(width.cutoff = 60),
tidy = TRUE)
# default for instructor is
# echo = T
# eval = T
# results = 'hide'
# you only want to see the results for certain chunks (e.g., plots)
# load packages
pacman::p_load(tidyverse,
snakecase,
psych,
skimr)
library(tidyverse)
library(snakecase)
library(psych)
library(skimr)
#| label: data setup
# load data
df <-
read_csv("data_raw/robot-expression-data_raw.csv",
col_types = "ffff?ffffftf")
names(df) <-
to_snake_case(names(df)) # lower_case with underlined separators
# Rename vectors using rename
df <-
df |>
rename(perceived_robot_gender = alyx_is, # the new labels are intended to be more descriptive
robot_expression = expression,
ppt_acc = resp_acc)
# sort out date col
df <-
df |> # this is the pipe operator; it means, "then do this"
mutate(exp_date = dmy(exp_date))
# examine the data
names(df) # notice how the cols are formatted now
# data summary - head
headTail(df)
# data summary - head specific
# for specific columns, e.g., cols 1, 5, and 7
head(df[, c(1,5,7)])
# data summary - tail
skim(df)
# data summary - overall
df |>
summary()
# data summary - sex
df |>
select(sex) |>
summary()
# Using case_match to recode cell values
df <-
df |>
mutate(sex = case_match(sex,              # mutate to change
"male" ~ "Male",  # supply erroneous value and new value
"ffemale" ~ "Female",
"femalew" ~ "Female"))
# Check the values of a vector using unique
unique(df$sex) # again, we use the $ symbol to isolate a specific vector
#| label: data setup
# load data
df <-
read_csv("data_raw/robot-expression-data_raw.csv",
col_types = "ffff?ffffftf")
names(df) <-
to_snake_case(names(df)) # lower_case with underlined separators
# Rename vectors using rename
df <-
df |>
rename(perceived_robot_gender = alyx_is, # the new labels are intended to be more descriptive
robot_expression = expression,
ppt_acc = resp_acc)
# sort out date col
df <-
df |> # this is the pipe operator; it means, "then do this"
mutate(exp_date = dmy(exp_date))
# examine the data
names(df) # notice how the cols are formatted now
# data summary - sex
df |>
select(sex) |>
summary()
# Using case_match to recode cell values
df <-
df2 |>  # create new and tidy object for illustration
mutate(sex = case_match(sex,              # mutate to change
"male" ~ "Male",  # supply erroneous value and new value
"ffemale" ~ "Female",
"femalew" ~ "Female"))
# Using case_match to recode cell values
df2 <-
df |>  # create new and tidy object for illustration
mutate(sex = case_match(sex,              # mutate to change
"male" ~ "Male",  # supply erroneous value and new value
"ffemale" ~ "Female",
"femalew" ~ "Female"))
# Check the values of a vector using unique
unique(df2$sex) # again, we use the $ symbol to isolate a specific vector
View(df2)
# Using case_match to recode cell values
df2 <-
df |>  # create new and tidy object for illustration
mutate(sex = case_match(sex,              # mutate to change
"male" ~ "Male",  # supply erroneous value and new value
"ffemale" ~ "Female",
"femalew" ~ "Female",
.default = sex)) # preserve all other entries in the vector
# Check the values of a vector using unique
unique(df2$sex) # again, we use the $ symbol to isolate a specific vector
View(df2)
df1 <- # this object only contains data about ppt id and eth
df |>
selec(id, eth)
df1 <- # this object only contains data about ppt id and eth
df |>
select(id, eth)
knitr::opts_chunk$set(echo = T,
cache = F,
eval = F,
message = FALSE,
warning = FALSE,
tidy.opts = list(width.cutoff = 60),
tidy = TRUE)
# default for instructor is echo = T; eval = T
# you only want to see the results for certain chunks (e.g., plots)
# Relevant packages
library(babynames)
library(tidyverse)
library(RColorBrewer)
library(Cairo)
# Create tibble for simplicity
babynames_df <-
babynames
# Wrangle a fraction of names dataset from `babynames` dataset
name_frac <-
babynames_df |>
filter(name %in% c("Angela", "Chris", "Peter")) |>
group_by(year) |>
mutate(year_total = sum(n)) |>
ungroup() |>
mutate(fraction = n / year_total)
View(babynames_df)
View(name_frac)
# Create tibble for simplicity
babynames_df <-
babynames
# Wrangle a fraction of names dataset from `babynames` dataset
babynames_class <-
babynames_df |>
filter(name %in% c("Angela", "Chris", "Peter"))
#| echo: true
#| output-location: slide
baby_plot <-
ggplot(babynames_class, aes(x = year,
y = prop,
colour = name)) +
geom_smooth(method = "loess") +
labs(x = "\nYear",
y = "Fraction\n",
title = "Fraction of the USA population names between 1880-2017") +
theme_minimal()
baby_plot
#| echo: true
#| output-location: slide
baby_plot <-
ggplot(babynames_class, aes(x = year,
y = prop,
colour = name)) +
geom_smooth(method = "loess") +
labs(x = "\nYear",
y = "Proportion\n",
title = "Proportion of the USA population names between 1880-2017") +
theme_minimal()
baby_plot
summary(babynames_df)
install.packages('summarytools')
knitr::opts_chunk$set(echo = T,
cache = F,
eval = F,
message = FALSE,
warning = FALSE,
tidy.opts = list(width.cutoff = 60),
tidy = TRUE)
# default for instructor is echo = T; eval = T
# you only want to see the results for certain chunks (e.g., plots)
# Create tibble for simplicity
babynames_df <-
babynames
# Relevant packages
library(babynames)
library(tidyverse)
library(RColorBrewer)
library(Cairo)
library(summarytools)
# Relevant packages
pacman::p_load(babynames,
tidyverse,
RColorBrewer,
Cairo,
summarytools)
# Create tibble for simplicity
babynames_df <-
babynames
# Summarise with the `dfSummary` function from summarytools package
dfSummary(babynames_df)
View(babynames_df)
# Wrangle a fraction of names dataset from `babynames` dataset
babynames_class <-
babynames_df |>
filter(name %in% c("Angela", "Chris", "Peter"))
# Create tibble for simplicity
babynames_df <-
babynames
# Wrangle a fraction of names dataset from `babynames` dataset
babynames_class <-
babynames_df |>
filter(name %in% c("Angela", "Chris", "Peter"))
# Summarise df
dfSummary(df)
# Read in data and supply data type argument
df <-
read_csv("data_raw/robot-expression-data_raw.csv",
col_types = "ffff?ffffftf")
# Summarise df
dfSummary(df)
# Tidy column headings using snakecase
# these functions come from the snakecase package we loaded earlier
names(df) <-
to_snake_case(names(df)) # lower_case with underlined separators
# load packages
library(snakecase)
# load packages for session
pacman::p_load(tidyverse,
summarytools,
snakecase)
# Tidy column headings using snakecase
# these functions come from the snakecase package we loaded earlier
names(df) <-
to_snake_case(names(df)) # lower_case with underlined separators
# examine the data
names(df) # notice how the cols are formatted now
