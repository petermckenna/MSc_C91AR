# presentation setup
knitr::opts_chunk$set(echo = T,
eval = T,
results = 'hide',
message = FALSE,
warning = FALSE,
tidy.opts = list(width.cutoff = 60),
tidy = TRUE)
# default for instructor is
# echo = T
# eval = T
# results = 'hide'
# you only want to see the results for certain chunks (e.g., plots)
# load packages
pacman::p_load(tidyverse,
snakecase,
psych,
skimr)
library(tidyverse)
library(snakecase)
library(psych)
library(skimr)
#| label: data setup
# load data
df <-
read_csv("data_raw/robot-expression-data_raw.csv",
col_types = "ffff?ffffftf")
names(df) <-
to_snake_case(names(df)) # lower_case with underlined separators
# Rename vectors using rename
df <-
df |>
rename(perceived_robot_gender = alyx_is, # the new labels are intended to be more descriptive
robot_expression = expression,
ppt_acc = resp_acc)
# sort out date col
df <-
df |> # this is the pipe operator; it means, "then do this"
mutate(exp_date = dmy(exp_date))
# examine the data
names(df) # notice how the cols are formatted now
# data summary - head
headTail(df)
# data summary - head specific
# for specific columns, e.g., cols 1, 5, and 7
head(df[, c(1,5,7)])
# data summary - tail
skim(df)
# data summary - overall
df |>
summary()
# data summary - sex
df |>
select(sex) |>
summary()
# Using case_match to recode cell values
df <-
df |>
mutate(sex = case_match(sex,              # mutate to change
"male" ~ "Male",  # supply erroneous value and new value
"ffemale" ~ "Female",
"femalew" ~ "Female"))
# Check the values of a vector using unique
unique(df$sex) # again, we use the $ symbol to isolate a specific vector
#| label: data setup
# load data
df <-
read_csv("data_raw/robot-expression-data_raw.csv",
col_types = "ffff?ffffftf")
names(df) <-
to_snake_case(names(df)) # lower_case with underlined separators
# Rename vectors using rename
df <-
df |>
rename(perceived_robot_gender = alyx_is, # the new labels are intended to be more descriptive
robot_expression = expression,
ppt_acc = resp_acc)
# sort out date col
df <-
df |> # this is the pipe operator; it means, "then do this"
mutate(exp_date = dmy(exp_date))
# examine the data
names(df) # notice how the cols are formatted now
# data summary - sex
df |>
select(sex) |>
summary()
# Using case_match to recode cell values
df <-
df2 |>  # create new and tidy object for illustration
mutate(sex = case_match(sex,              # mutate to change
"male" ~ "Male",  # supply erroneous value and new value
"ffemale" ~ "Female",
"femalew" ~ "Female"))
# Using case_match to recode cell values
df2 <-
df |>  # create new and tidy object for illustration
mutate(sex = case_match(sex,              # mutate to change
"male" ~ "Male",  # supply erroneous value and new value
"ffemale" ~ "Female",
"femalew" ~ "Female"))
# Check the values of a vector using unique
unique(df2$sex) # again, we use the $ symbol to isolate a specific vector
View(df2)
# Using case_match to recode cell values
df2 <-
df |>  # create new and tidy object for illustration
mutate(sex = case_match(sex,              # mutate to change
"male" ~ "Male",  # supply erroneous value and new value
"ffemale" ~ "Female",
"femalew" ~ "Female",
.default = sex)) # preserve all other entries in the vector
# Check the values of a vector using unique
unique(df2$sex) # again, we use the $ symbol to isolate a specific vector
View(df2)
df1 <- # this object only contains data about ppt id and eth
df |>
selec(id, eth)
df1 <- # this object only contains data about ppt id and eth
df |>
select(id, eth)
knitr::opts_chunk$set(echo = T,
cache = F,
eval = F,
message = FALSE,
warning = FALSE,
tidy.opts = list(width.cutoff = 60),
tidy = TRUE)
# default for instructor is echo = T; eval = T
# you only want to see the results for certain chunks (e.g., plots)
# Relevant packages
library(babynames)
library(tidyverse)
library(RColorBrewer)
library(Cairo)
# Create tibble for simplicity
babynames_df <-
babynames
# Wrangle a fraction of names dataset from `babynames` dataset
name_frac <-
babynames_df |>
filter(name %in% c("Angela", "Chris", "Peter")) |>
group_by(year) |>
mutate(year_total = sum(n)) |>
ungroup() |>
mutate(fraction = n / year_total)
View(babynames_df)
View(name_frac)
# Create tibble for simplicity
babynames_df <-
babynames
# Wrangle a fraction of names dataset from `babynames` dataset
babynames_class <-
babynames_df |>
filter(name %in% c("Angela", "Chris", "Peter"))
#| echo: true
#| output-location: slide
baby_plot <-
ggplot(babynames_class, aes(x = year,
y = prop,
colour = name)) +
geom_smooth(method = "loess") +
labs(x = "\nYear",
y = "Fraction\n",
title = "Fraction of the USA population names between 1880-2017") +
theme_minimal()
baby_plot
#| echo: true
#| output-location: slide
baby_plot <-
ggplot(babynames_class, aes(x = year,
y = prop,
colour = name)) +
geom_smooth(method = "loess") +
labs(x = "\nYear",
y = "Proportion\n",
title = "Proportion of the USA population names between 1880-2017") +
theme_minimal()
baby_plot
summary(babynames_df)
install.packages('summarytools')
knitr::opts_chunk$set(echo = T,
cache = F,
eval = F,
message = FALSE,
warning = FALSE,
tidy.opts = list(width.cutoff = 60),
tidy = TRUE)
# default for instructor is echo = T; eval = T
# you only want to see the results for certain chunks (e.g., plots)
# Create tibble for simplicity
babynames_df <-
babynames
# Relevant packages
library(babynames)
library(tidyverse)
library(RColorBrewer)
library(Cairo)
library(summarytools)
# Relevant packages
pacman::p_load(babynames,
tidyverse,
RColorBrewer,
Cairo,
summarytools)
# Create tibble for simplicity
babynames_df <-
babynames
# Summarise with the `dfSummary` function from summarytools package
dfSummary(babynames_df)
View(babynames_df)
# Wrangle a fraction of names dataset from `babynames` dataset
babynames_class <-
babynames_df |>
filter(name %in% c("Angela", "Chris", "Peter"))
# Create tibble for simplicity
babynames_df <-
babynames
# Wrangle a fraction of names dataset from `babynames` dataset
babynames_class <-
babynames_df |>
filter(name %in% c("Angela", "Chris", "Peter"))
# Summarise df
dfSummary(df)
# Read in data and supply data type argument
df <-
read_csv("data_raw/robot-expression-data_raw.csv",
col_types = "ffff?ffffftf")
# Summarise df
dfSummary(df)
# Tidy column headings using snakecase
# these functions come from the snakecase package we loaded earlier
names(df) <-
to_snake_case(names(df)) # lower_case with underlined separators
# load packages
library(snakecase)
# load packages for session
pacman::p_load(tidyverse,
summarytools,
snakecase)
# Tidy column headings using snakecase
# these functions come from the snakecase package we loaded earlier
names(df) <-
to_snake_case(names(df)) # lower_case with underlined separators
# examine the data
names(df) # notice how the cols are formatted now
install.packages('tidyverse')
install.packages("tidyverse")
# load package
library(tidyverse)
knitr::opts_chunk$set(echo = T,
cache = F,
eval = F,
message = FALSE,
warning = FALSE,
tidy.opts = list(width.cutoff = 60),
tidy = TRUE)
# default for instructor is echo = T; eval = T
# you only want to see the results for certain chunks (e.g., plots)
# Summarise with the `dfSummary` function from summarytools package
dfSummary(babynames_df)
library(summarytools)
# Summarise with the `dfSummary` function from summarytools package
dfSummary(babynames_df)
?flights
?flights
?nycflights
?nycflights13
knitr::opts_chunk$set(echo = T,
eval = F,
results = 'hide',
message = FALSE,
warning = FALSE,
tidy.opts = list(width.cutoff = 60),
tidy = TRUE)
# default for instructor is echo = T; eval = T
# you only want to see the results for certain chunks (e.g., plots)
# Let's stick to pacman to keep loading and installation simple
pacman::p_load(tidyverse,
nycflights13,
#summarytools,
trimr)
summary(flights)
# Strive for:
short_flights <-
flights |> filter(air_time < 60)
# Avoid:
#SHORTFLIGHTS <- flights |> filter(air_time < 60)
View(short_flights)
# Clear data
rm(list = ls())  # Removes all objects from environment
# Clear packages
p_unload(all)  # Remove all contributed packages
# presentation setup
knitr::opts_chunk$set(echo = T,
eval = T,
results = 'hide',
message = FALSE,
warning = FALSE,
tidy.opts = list(width.cutoff = 60),
tidy = TRUE)
# default for instructor is
# echo = T
# eval = T
# results = 'hide'
# you only want to see the results for certain chunks (e.g., plots)
# load packages
pacman::p_load(tidyverse,
snakecase,
psych,
summarytools,
messy,
tidyplots)
# read in dataset
df <-
read_csv("data_tidy/c91ar_maze_data.csv",
col_types = "cccdccd")
View(df)
summary(df)
glimpse(df)
# make script reproducible
set.seed(1234)
# untidy our maze data
df_messy <-
df |>
make_missing(cols = "follow_robot",
missing = NA,
messiness = 0.05) |> # add missing values to follow_robot
make_missing(cols = "rt",
missing = NA,
messiness = 0.3) |> # add missing and erroneous values to rt
add_special_chars(cols = "condition") # add special chars to condition levels
View(df_messy)
df_messy |>
dfSummary()
unique(df_messy$condition) # what a mess!
# using a combination of case_when and str_detect
df_messy_levels <-
df_messy |>
mutate(
condition = str_replace_all(condition,
"[^[:alnum:][:space:]]", "")
)
unique(df_messy_levels$condition)
View(df_messy_levels)
unique(df_messy_levels$condition)
# Probably we do a little more tidying
df_messy_levels <-
df_messy_levels |>
mutate(condition = case_match(condition,
"NoToM" ~ "No_ToM",
"baseline" ~ "Baseline",
.default = condition))
unique(df_messy_levels$condition)
unique(df_messy_levels$condition)
unique(df_messy$condition)
# Update df_messy with df_messy_levels values
df_messy <-
df_messy_levels
# remove df_messy levels - as this is now contained in df_messy
rm(df_messy_levels)
unique(df_messy$condition)
df_messy_na <-
df_messy |>
drop_na()
(4726/7060)*100
rm(df_messy_na)
# examine the histogram
df_messy |>
ggplot(mapping = aes(rt)) +
geom_histogram(bins = 100) +
labs(y = "Frequency",
title = "Histogram of Response time (ms) distribution")
df_messy |>
filter(rt %in% c(500:5000)) |>
ggplot(mapping = aes(log(rt))) +
geom_histogram(bins = 100) +
labs(y = "Frequency",
title = "Histogram of log(rt) distribution")
df_messy |>
filter(rt %in% c(500:5000)) |>
summarise(avg_rt = mean(rt))
# Create mean variable
avg_rt <- 1646.523
# create new object that replaces missing rt values with the mean
df_messy1 <-
df_messy |>
filter(rt %in% c(500:5000)) |>              # remember to set the new bounds!
mutate(rt = if_else(is.na(rt),
avg_rt, # if the cell is empty, enter the mean of the vector
rt))                     # otherwise, put what was there already
# Check for old
df_messy |>
summarise(count_nas = is.na(rt) |>
sum()) |>
pluck("count_nas")
df_messy |>
summarise(count_nas = is.na(rt) |>
sum())
df_messy |>
summarise(count_nas = is.na(rt) |>
sum()) |>
pluck("count_nas")
# Check for new
df_messy1 |>
summarise(count_nas = is.na(rt) |>
sum()) |>
pluck("count_nas")
# group variable = condition
df_messy1 |>
group_by(condition) |>
count()
df_messy1 |>
ggplot(mapping = aes(log(rt))) +
geom_histogram(bins = 100) +
labs(y = "Frequency",
title = "Histogram of log(rt) distribution")
# using tidyplots
df_messy1 <-
df_messy1 |>
mutate(log_rt = log(rt)) # tidyplots needs to be passed existing vectors
df_messy1 |>
tidyplot(x = log_rt, color = condition) |>
add_histogram(bins = 30) |>
add_title("Histogram of log(rt) distribution per group") |>
adjust_x_axis_title("log(rt)") |>
adjust_y_axis_title("Frequency")
# Overall
describe(df_messy1$log_rt) |>
select(11,12)
# Overall
describe(df_messy1$log_rt)
# Overall
describe(df_messy1$log_rt) |>
select(11,12)
# By group
describeBy(log_rt ~ condition,
mat = TRUE,
data = df_messy1) |>
select(2, 13:14)
df_messy1 |>
tidyplot(x = condition,
y = log_rt,
color = condition) |>
add_boxplot() |>
add_test_pvalue(ref.group = 1) |>
add_title("Comparing log(rt) against the baseline") |>
adjust_x_axis_title("Experimental group") |>
adjust_y_axis_title("log(rt)") |>
adjust_legend_title("Experimental group")
