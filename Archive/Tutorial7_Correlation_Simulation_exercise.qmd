---
title: "Week 8 Tutorial: Correlation Simulation Exercise"
subtitle: "C91AR: Advanced Statistics using R"
title-slide-attributes:
    data-background-image: images/peter_staff_photo_small.jpg
    data-background-size: auto
    data-background-position: "50% 2%"
author: "Dr Peter E McKenna"
date: "`r format(Sys.Date(), '%Y-%m-%d')`"
format: 
  revealjs:
    code-block-height: 300px
    slide-number: true
    logo: sossdoc-logo.png
    css: peter_style.css
    theme: [default, my_quarto_theme.scss]
editor: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}

# markdown formatting
knitr::opts_chunk$set(echo = TRUE)

# load packages
library(tidyverse)
library(corrr)
library(magrittr)
library(psych)

```

# Session outline

- Today, I am handing you the reigns.
- You will work individually to simulate data from a new dataset.
- To do so, you will need to follow the instructions from Lecture 6.
- It would be a good idea to have the Lecture slides open in a separate tab whilst you work today.
- Also, we will be writing a Quarto document, not a script.

# Why are you doing this to us Pete?

- The session is formatted in a similar manner to the summative assessment and will give you some time to practice your programming skills in Quarto.
- I've kept to correlation as we should be familiar with the process of simulating correlational data by now.
- Correlational data is also simpler mathematically than predictive models.

# Task details

:::: {.columns}

::: {.column width="50%"}
- Set the seed (for reproducibility)
- Read in the data; specify col_types
- Load the same packages: 'tidyverse'. 'corrr', 'psych', 'GGally'
- Examine and describe the data (e.g., by using 'psych' package)
- Generate a scatter plot of the relationship between the 2 vectors
- Transform the data (**if necessary**)
:::

::: {.column width="50%"}
- Calculate statistics for MASS::mvrnorm
- Simulate small sample and check the output
- Simulate a sample of N=1000
- Create a combined simulated and real dataset
- Plot real and simulated data against one another 
- Save the data and the plot
- Email me the plot at p.mckenna@hw.ac.uk
:::

::::

# Data for today

- "trust_and_rt.csv"

Data from a research study examining trust and cognition.Participants first completed a trust scale, scoring on a continuous scale between 0 and 100. They then took part in a cognitive task of measuring response time. They were told that, during the task, they would be competing against another experimenter. Importantly, they were informed that this experimenter could press a button to reveal the upcoming trial before the participant. 

# Write & read exercise data

```{r include=FALSE}

# Write data to file
# write_csv(data, "data_out/trust_and_rt.csv")

```


```{r}

# Read in the data
df <-
  read_csv("data_out/trust_and_rt.csv")

```


# Plot the data

```{r include=FALSE}

# Generate scatter plot
ggplot(data = df,
       mapping = aes(x = trust_score,
                     y = resp_time)) +
  geom_point(alpha = .6) +
  labs(x = "Trust Score",
       y = "Response time in milliseconds")


```

# Calculate summary stats

```{r include=FALSE}

describe(df)

```

# Check correlation

```{r include=FALSE}

cor(df$trust_score, 
    df$resp_time)

```

# Gathering statistics
The mean for trust score was 50.08 (SD=1.02) and the mean for response time was 1262.41ms (SD=1.01). The correlation between trust score and response time was 0.8.

# Enter values into formula

$$\sum = \begin{pmatrix}
1.02^2 & (.8)(1.02)(.1.01) \\
(.8)(1.01)(1.02) & 1.01^2
\end{pmatrix} = \begin{pmatrix}
1.04 & .82\\
.82 & .1.02
\end{pmatrix}$$


```{r define covariance matrix}

# define and store covariances
my_cov <- 
  .8 * 1.02 * 1.01 # correlation times trust_score(sd) times rt(sd)

# use the matrix function to define our sigma
my_sigma <-
  matrix(c(1.02^2, my_cov, 
           my_cov, 1.01^2), 
         ncol = 2)

my_sigma          # print the matrix


```


# Simulate data

```{r}

sim_sample <-
  MASS::mvrnorm(n = 6,                 
                mu = c(trust_score = 50.08,  
                       resp_time = 1262.41), 
                Sigma = my_sigma)     

# view the output
sim_sample

```


# Create simulated dataset

```{r}

new_humans <-
  MASS::mvrnorm(n = 1000,
                mu = c(trust_score = 50.08,  
                       resp_time = 1262.41),
                Sigma = my_sigma) |>
as_tibble() |>               
mutate(type = "simulated")    

# Examine data
glimpse(new_humans)

```

# Create master data file

```{r}

# Create master dataset
all_data <-
  bind_rows(df |>
              mutate(type = "real"),
            new_humans)


# examine data
glimpse(all_data)
unique(all_data$type)

```


```{r plot sim data}

# plot the data
ggplot(all_data,
       aes(x = trust_score, 
           y = resp_time)) +
  geom_point(aes(colour = type), 
             alpha = .6) +
  labs(x = "Trust Score",
       y = "Response time in milliseconds")

```